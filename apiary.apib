FORMAT: 1A
HOST: https://localhost:8080/

# HouseMate API

HouseMate is a web API that allows users to view and create posts for renting houses and appartaments.

##  Posts Collection [/posts]

### List All Posts [GET]
Dascription:
This method returns a JSON containing the whole collection of posts.
The field post_id represents the unique identifier for each post.
The field self provides helpful information to the client so that
it can fetch easily a specific post.

Responses:
The status code 200 is returned when the web service fetches successfully
the whole collection of posts from the database.

+ Response 200 (application/json)

        {
            "message": [
                {
                    "_id": "62866283f3ff1e92d70116ef",
                    "title": "postato",
                    "description": "tugurio",
                    "createdBy": "miFidoSullaParola@amogus.com",
                    "post_id": 1,
                    "__v": 0
                },
                {
                    "_id": "628662fbf3ff1e92d70116f2",
                    "title": "Appartamento bellissimo",
                    "description": "Vicino a tutto",
                    "createdBy": "BenedettoBenedetti@email.com",
                    "post_id": 2,
                    "__v": 0 
                }
            ]
        }

### Put Post [PUT]
This method is not allowed.
The list is already updated by the insertions and deletions
performed by the users.

+ Response 405 (application/json)

            {
                "Method Not Allowed"
            }
            
### Delete All Posts [DELETE]
Clearing the list is not allowed. This api returns a 405 status code: Method not allowed.
+ Response 405 (application/json)

            {
                "Method Not Allowed"
            }

### Create a New Post [POST]
Description:
This post request allows to create a new post and add the data in the database. Each post has an owner
that is identified by the email, that is unique.

Response:
The status code 201 is returned when a post has been created successfully.
The response header contains a field called Location which provides the URL of the newly created post.
Its body contains the status code together with its human-friendly description.

The status code 400 is returned when the email address provided by the request does not belong to any
signed-up user.

The status code 404 is returned when the web service fails to save the post in the database.

+ Request (application/json)

        {
            "title": "Appartamento bellissimo",
            "description": "Vicino a tutto",
            "email": "BenedettoBenedetti@email.com"
        }
        
+ Response 201 (application/json)

    + Headers
    
            Location: /api/v1/posts/2
            
    + Body
    
            {
                    
                "status": 201,
                "message": "Created"

            }
            
+ Response 400 (application/json)
   
            {
                    
                "status": 404,
                "message": "Bad Request"

            }
            
+ Response 404 (application/json)
   
            {
                    
                "status": 404,
                "message": "Not Found"

            }
## Single Post [/posts/{post_id}]

### Fetch one post [GET]
Description:
This method fetches a post by its post_id.

Responses:
The status code 400 is returned when an invalid id value has been provided by the request.

The status code 404 is returned when the post is not in the database.
+ Response 200 (application/json)

        {
            "message": {
                            "_id": "62866283f3ff1e92d70116ef",
                            "title": "postato",
                            "description": "tugurio",
                            "createdBy": "miFidoSullaParola@amogus.com",
                            "post_id": 1,
                            "__v": 0
                }
        }
         
+ Response 404 (application/json)
   
            {
                    
                "status": 404,
                "message": "Not Found"

            }  
+ Response 400 (application/json)
   
            {
                    
                "status": 400,
                "message": "Bad Request"

            }
##  User Collection [/users]

### Create a new user [POST]

This method allows to add an user to register in the system. The request is formed by the email 
and the password for the account. The response returns a status code of "success" (200) and other 
parameters useful for the login, such as the account token and the email.

+ Request (application/json)

        {
            "email": "prova@prova.com"
            "password": "ASecurePassword"
        }

+ Response 200 (application/json)

        {
            "success": true
            "message": "User created!"
            "token": "628099dc6824bsadefa6e372e2a" 
            "email": "prova@prova.com"
            "id": "628240wq213258274ea229984ddee"
            "self": "api/v1/628240258274ea229984ddee"
        }
        
        
##  Authentication [/authentications]

### Authenticate a user [POST]

This method allows a user to authenticate to the service: first the
email of the user is fetched, then a user with the same email is searched,
and, if found, the passwords are compared: if they are the same, a java web token (jwt)
is returned. If the passwords don't match, a json is returned, displaying the 
message error. Also if a user with the same email provided is not found, another
json is returned, informing of the error. 

+ Response 200 (application/json)

        {
            "success": true,
            "message": "Enjoy your token!",
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InBpcHBvQGVtYWlsLmNvbSIsImlkIjoiNjI4N2FiY2RmMGE5NmJkOTc1YTNhODRlIiwiaWF0IjoxNjUzMDYwNTAzLCJleHAiOjE2NTMxNDY5MDN9.SUaMnP1YDdaGTIH-5au7NG7MlLTH_pIkOqUqQ1g0WiQ",
            "email": "pippo@email.com",
            "username": "pippo",
            "id": "6287abcdf0a96bd975a3a84e",
            "self": "api/v1/6287abcdf0a96bd975a3a84e"
        }