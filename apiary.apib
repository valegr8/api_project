FORMAT: 1A
HOST: https://localhost:8080/

# HouseMate API

HouseMate is a web API that allows users to view and create posts for renting houses and appartaments.

##  Posts Collection [/posts]

### List All Posts [GET]

This method returns a JSON containing the whole collection of posts.
The field post_id represents the unique identifier for each post.
The field self provides helpful information to the client so that
it can fetch easily a specific post.

+ Response 200 (application/json)

        {
            "message": [
                {
                    "_id": "62866283f3ff1e92d70116ef",
                    "title": "postato",
                    "description": "tugurio",
                    "createdBy": "miFidoSullaParola@amogus.com",
                    "post_id": 1,
                    "__v": 0,
                    "self": "/api/v1/posts/1"
                },
                {
                    "_id": "628662fbf3ff1e92d70116f2",
                    "title": "Appartamento bellissimo",
                    "description": "Vicino a tutto",
                    "createdBy": "BenedettoBenedetti@email.com",
                    "post_id": 2,
                    "__v": 0,
                    "self": "/api/v1/posts/2"
                }
            ]
        }

### Put Post [PUT]
This method is not allowed.
The list is already updated by the insertions and deletions
performed by the users.

+ Response 405 (application/json)

            {
                "Method Not Allowed"
            }
            
### Delete All Posts [DELETE]
Clearing the list is not allowed. This api returns a 405 status code: Method not allowed.
+ Response 405 (application/json)

            {
                "Method Not Allowed"
            }

### Create a New Post [POST]
This post request allows to create a new post and add the data in the database. Each post has an owner
that is identified by the email, that is unique.
The response header contains a field called Location which provides the URL of the newly created post.
Its body contains the status code together with its human-friendly description.


+ Request (application/json)

        {
            "title": "Appartamento bellissimo",
            "description": "Vicino a tutto",
            "email": "BenedettoBenedetti@email.com"
        }
+ Response 201 (application/json)

    + Headers
    
            Location: /api/v1/posts/2
            
    + Body
    
            {
                    
                "status": 201,
                "message": "Created"

            }


## Single Post [/posts/{post_id}]

### Fetch one post [GET]
This method fetches a post by its post_id.
+ Response 200 (application/json)

        {
            "message": {
                            "_id": "62866283f3ff1e92d70116ef",
                            "title": "postato",
                            "description": "tugurio",
                            "createdBy": "miFidoSullaParola@amogus.com",
                            "post_id": 1,
                            "__v": 0
                }
        }
            
##  User Collection [/users]

### Create a new user [POST]

This method allows to add an user to register in the system. The request is formed by the email 
and the password for the account. The response returns a status code of "success" (200) and other 
parameters useful for the login, such as the account token and the email.

+ Request (application/json)

        {
            "email": "prova@prova.com"
            "password": "ASecurePassword"
        }

+ Response 200 (application/json)

        {
            "success": true
            "message": "User created!"
            "token": "628099dc6824bsadefa6e372e2a" 
            "email": "prova@prova.com"
            "id": "628240wq213258274ea229984ddee"
            "self": "api/v1/628240258274ea229984ddee"
        }
        
        
### List all Users [GET]

This method allows to get all user registered to the service, including
each one's email.

+ Response 200 (application/json)

        [
            {
                "self": "/api/v1/users/627fb93e6daddf9f174e7567",
                "email": "harrypotter"
            },
            {
                "self": "/api/v1/users/6282096ac4239ca9b8520338",
                "email": "admin"
            },
            {
                "self": "/api/v1/users/628223a19127e6c8feb60e5f",
                "email": "pippo"
            },
            {
                "self": "/api/v1/users/628223ab9127e6c8feb60e62",
                "email": "admin2"
            },
            {
                "self": "/api/v1/users/62822430b84146e3dc014f7e",
                "email": "aldo"
            },
            {
                "self": "/api/v1/users/628226f130a27be5e2fb1240",
                "email": "admnin123"
            }
        ]
        

## Authentication [/authentication]