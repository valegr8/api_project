openapi: 3.0.0
info:
  version: '2.0'
  title: "HouseMate OpenAPI"
  description: HouseMate is a web API that allows users to view and create posts for renting houses and appartaments.
  license:
    name: MIT
servers:
  - url: http://localhost:8080/api/v2
    description: Localhost
basepath: /api/v2
consumes:
- application/json
produces:
- application/json
paths:
  /posts:
    get:
      description: >-
        Gets the list of posts. The list can be filtered by some optional parameters, such as the number of romms,
        the type of the contract (e.g annual/monthly/...), the price, excetera.
      summary: List of posts.
      parameters:
        - in: query
          name: param
          schema:
            type: string
          description: String that can contain a location name or a specific word. 
                       Used to retrieve the posts 
                       that contain that word in the title or description of the post, 
                       the name or description of the room or in the location field.
        - in: query
          name: rooms
          schema:
            type: integer
          description: The number of rooms in a post.
        - in: query
          name: maxp
          schema:
            type: integer
          description: Maximum price limit.
        - in: query
          name: minp
          schema:
            type: integer
          description: Minimum price limit.
        - in: query
          name: contract
          schema:
            type: integer
          description: Type of contract (e.g annual/monthly/...).
      responses:
        '200':
          description: 'Collection of posts'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
        '404':
           description: 'Failure to fetch the data'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 404
                     description: status code
                   message:
                     type: string
                     example: Not found
                     description: further info
                 required:
                   - status
                   - message
        '500':
           description: 'Internal server error, returned if the query to the database fails'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 500
                     description: status code
                   message:
                     type: string
                     example: Internal server error
                     description: further info
                 required:
                   - status
                   - message

    put:
      description: >-
        This method is not allowed.
      responses:
        '405':
          description: 'Method Not Allowed'
          content:
            application/json:
              schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 405
                     description: status code
                   message:
                     type: string
                     example: Method Not Allowed
                     description: Human-readable description
                 required:
                   - status
                   - message
    post:
      description: >-
        This method is not allowed.
      responses:
        '405':
          description: 'Method Not Allowed'
          content:
            application/json:
              schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 405
                     description: status code
                   message:
                     type: string
                     example: Method Not Allowed
                     description: Human-readable description
                 required:
                   - status
                   - message                   

    delete:
      description: >-
        This method is not allowed.
      responses:
        '405':
          description: 'Method Not Allowed'
          content:
            application/json:
              schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 405
                     description: status code
                   message:
                     type: string
                     example: Method Not Allowed
                     description: Human-readable description
                 required:
                   - status
                   - message



  /posts/{id}:
    get:
      description: >-
        Gets a post.
      summary: View a post
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The mongodb objectId of the post
      responses:
        '201':
          description: 'A single post'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 62866283f3ff1e92d70116ef
                        description: "mongodb id of the newly created post"
                      title:
                        type: string
                        example: Appartamento bellissimo
                        description: "Title of the post"
                      description:
                        type: string
                        example: Vicino a tutto
                        description: "Details of the post"
                      createdBy:
                        type: string
                        example: BenedettoBenedetti@email.com
                        description: "Creator of the post"

        '404':
           description: 'The post is not in the database'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 404
                     description: status code
                   message:
                     type: string
                     example: Not Found
                     description: Human-readable description
                 required:
                   - status
                   - message

        '400':
           description: 'The value of the id parameter is not a valid mongodb objectId'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 400
                     description: status code
                   message:
                     type: string
                     example: Bad Request
                     description: status code
                 required:
                   - status
                   - message


  /users:

    post:
      description: >-
        Creates a new user in the system.
      summary: New user creation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - username
              properties:
                email:
                  type: string
                  example: prova@prova.com
                  description: 'Email address of the user'
              username:
                type: string
                example: pippo
                description: 'Name othe user'
              password:
                type: string
                example: ASecurePassword
                description: 'Password of the user'
      responses:
        '201':
          description: 'user created.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: user created
                  token:
                    type: string
                    example: 628099dc6824bsadefa6e372e2a
                  email:
                    type: string
                    example: prova@prova.com
                  username:
                    type: string
                    example: pippo
                  id:
                    type: string
                    example: 628240wq213258274ea229984ddee
        '409':
          description: 'There is already an user registered with that email address'
          content:
            application/json:
              schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 409
                     description: status code
                   message:
                     type: string
                     example: User already exists
                     description: Human-readable description
                 required:
                   - status
                   - message
        '400':
           description: 'Email, username or password is empty'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 400
                     description: status code
                   message:
                     type: string
                     example: Bad Request
                     description: Human-readable description
                 required:
                   - status
                   - message

  /users/{uid}/posts/:
    post:
      description: >-
        Creates a new post.
      summary: New post creation
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: The objectId of the registered user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - createdBy
                - contract
                - phone
                - showPrice
                - email
                - rooms
                - available
                - where
              properties:
                  title:
                    type: string
                    example: Appartamento bellissimo
                  description:
                    type: string
                    example: Vicino al supermercato
                  createdBy:
                    type: string
                    example: 62926a256236cd334360ac49
                  contract:
                    type: string
                    example: annuale
                  phone:
                    type: string
                    example: 3456 12890
                  showPrice:
                    type: string
                    example: "500"
                  email:
                    type: string
                    example: pippo@email.com
                  rooms:
                    type: integer
                    example: 6
                  available:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'
                  where:
                    type: string
                    example: Via Rossi, 44 (TN)


      responses:
        '201':
           description: 'User created'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 201
                     description: status code
                   message:
                     type: string
                     example: Post saved successfully
                     description: status code
                 required:
                   - status
                   - message

        '404':
           description: 'Post saving failed'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 404
                     description: status code
                   message:
                     type: string
                     example: Post saving failed
                     description: status code
                 required:
                   - status
                   - message
    get:
      description: >-
        Gets the list of the posts created by the user.
      summary: View all posts
      responses:
        '200':
          description: 'Collection of posts'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
        '404':
           description: 'Failure to fetch the data'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 404
                     description: status code
                   message:
                     type: string
                     example: Not found
                     description: further info
                 required:
                   - status
                   - message
                   
  /users/{uid}/posts/{id}:
    get:
      description: >-
        Gets a post.
      summary: View a post
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The mongodb objectId of the post
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: The mongodb objectId of the registered user
      responses:
        '200':
          description: 'A single post'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: object
                    properties:
                      title:
                        type: string
                        example: Appartamento bellissimo
                        description: "title of the post"
                      description:
                        type: string
                        example: Vicino a tutto
                        description: "Further info"
                      createdBy:
                        type: string
                        example: 62926a256236cd334360ac49
                        description: "mongodb objectId of the creator"
                      contract:
                        type: string
                        example: annuale
                        description: "type of contract"
                      phone:
                        type: string
                        example: 1234 56789
                        description: "Phone number of the creator"
                      showPrice:
                        type: string
                        example: 500
                        description: "The price of the whole apartment"
                      email:
                        type: string
                        example: pippo@prova.com
                        description: "Email address of the creator"
                      rooms:
                        type: integer
                        example: 6
                        description: "Number of rooms"
                      available:
                        type: array
                        items:
                          $ref: '#/components/schemas/Room'
                        description: "Rooms available for rent"
                      where:
                        type: string
                        example: Via Rossi, 44 (TN)
                        description: "Address of the apartment"


        '404':
           description: 'The post is not in the database'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 404
                     description: status code
                   message:
                     type: string
                     example: Not Found
                     description: Human-readable description
                 required:
                   - status
                   - message

        '400':
           description: 'The value of the id parameter is not a valid mongodb objectId'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 400
                     description: status code
                   message:
                     type: string
                     example: Bad Request
                     description: status code
                 required:
                   - status
                   - message

  /users/{uid}/posts/{id}/rooms:
    get:
      description: >-
        Fetches the array of rooms available inside the post.
      summary: View rooms
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The mongodb objectId of the post
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: The mongodb objectId of the registered user
      responses:
        '200':
          description: 'List of the rooms available'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'
        '400':
           description: 'Either at least one id is not valid or the uid does not match with id'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 400
                     description: status code
                   message:
                     type: string
                     example: At least one id is not valid
                     example: Post id and user id are mismatching
                     description: explanation of the error
                 required:
                   - status
                   - message
                   
  /users/{uid}/posts/{id}/rooms/{rid}:
    get:
      description: >-
        Gets a room.
      summary: View a room
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The mongodb objectId of the post
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: The mongodb objectId of the registered user
        - in: path
          name: rid
          required: true
          schema:
            type: string
          description: The mongodb objectId of the room
      responses:
        '200':
          description: 'A room'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Stanza1
                        description: "Name of the room"
                      price:
                        type: integer
                        example: 500
                        description: "Price for the room"
                      description:
                        type: string
                        example: Stanza molto bella
                        description: "Further info"
        '400':
           description: 'Either at least one id is not valid or the uid does not match with id'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 400
                     description: status code
                   message:
                     type: string
                     example: At least one id is not valid
                     example: Post id and user id are mismatching
                     description: explanation of the error
                 required:
                   - status
                   - message


    delete:
      description: >-
        Deletes a room.
      responses:
        '200':
          description: 'Removes a room'
          content:
            application/json:
              schema:
                 type: object
                 properties:
                   message:
                     type: string
                     example: Room removed correctly
                     description: Human-readable description
                 required:
                   - message
        '400':
          description: 'Either at least one id is not valid or the uid does not match with id'
          content:
            application/json:
              schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 400
                     description: status code
                   message:
                     type: string
                     example: Room removed correctly
                     description: Human-readable description
                 required:
                   - status
                   - message

  /users/{uid}/favorites/:
    post:
      description: >-
        Adds a post in the favorites.
      summary: Addition to favorites
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: The mongodb objecId of the registered user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                  id:
                    type: string
                    example: 628a1d73fc4964ea27473f96


      responses:
        '201':
           description: 'The post has been added to the favorites'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   success:
                     type: boolean
                     example: true
                     description: The request is successful
                   message:
                     type: string
                     example: Post added to your favorites!
                     description: explanation
                   uid:
                     type: string
                     example: 6295b6e5a8f9e7c8aca31f14
                     description: user id
                   id:
                     type: string
                     example: 628a1d73fc4964ea27473f96
                     description: post id
                   favorite:
                     type: array
                     description: Array of the ids of your bookmarked posts
                     items:
                       $ref: '#/components/schemas/Bookmarked'
                 required:
                   - success
                   - message
                   - uid
                   - id
                   - favorite

        '404':
           description: 'User not found in the databease'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 404
                     description: status code
                   message:
                     type: string
                     example: user not found
                     description: explanation
                 required:
                   - status
                   - message
        '400':
           description: 'Either the uid or the post id are not valid objectIds'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 400
                     description: status code
                   message:
                     type: string
                     example: Bad request, uid not valid
                     description: explanation
                 required:
                   - status
                   - message
    delete:
      description: >-
        Removes a post from the favorites.
      summary: Remove from favorites
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: The mongodb objecId of the registered user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                  id:
                    type: string
                    example: 628a1d73fc4964ea27473f96


      responses:
        '201':
           description: 'The post has been removed from the favorites'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   success:
                     type: boolean
                     example: true
                     description: The request is successful
                   message:
                     type: string
                     example: Post removed from your favorites!
                     description: explanation
                   uid:
                     type: string
                     example: 6295b6e5a8f9e7c8aca31f14
                     description: user id
                   id:
                     type: string
                     example: 628a1d73fc4964ea27473f96
                     description: post id
                   favorite:
                     type: array
                     description: Array of the ids of your bookmarked posts
                     items:
                       $ref: '#/components/schemas/Bookmarked'
                 required:
                   - success
                   - message
                   - uid
                   - id
                   - favorite

        '404':
           description: 'User not found in the databease'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 404
                     description: status code
                   message:
                     type: string
                     example: user not found
                     description: explanation
                 required:
                   - status
                   - message
        '400':
           description: 'Either the uid or the post id are not valid objectIds'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 400
                     description: status code
                   message:
                     type: string
                     example: Bad request, uid not valid
                     description: explanation
                 required:
                   - status
                   - message

  /authentications:
    post:
      description: >-
        Authenticates a user.
      summary: User authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - username
              properties:
                email:
                  type: string
                  example: pippo@email.com
                  description: 'Email address of the user'
                username:
                  type: string
                  example: pippo
                  description: 'Name othe user'
                password:
                  type: string
                  example: "123456"
                  description: 'Password of the user'
      responses:
        '201':
          description: 'user authenticated.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Enjoy your token!
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InBpcHBvQGVtYWlsLmNvbSIsImlkIjoiNjI4N2FiY2RmMGE5NmJkOTc1YTNhODRlIiwiaWF0IjoxNjUzMDYwNTAzLCJleHAiOjE2NTMxNDY5MDN9.SUaMnP1YDdaGTIH-5au7NG7MlLTH_pIkOqUqQ1g0WiQ
                  email:
                    type: string
                    example: pippo@email.com
                  username:
                    type: string
                    example: pippo
                  id:
                    type: string
                    example: 6287abcdf0a96bd975a3a84e
        '404':
           description: 'The user does not exist'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 404
                     description: status code
                   message:
                     type: string
                     example: User not found
                     description: status code
                 required:
                   - status
                   - message

        '400':
           description: 'Either the email address or the passward is invalid, e.g. empty password'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 400
                     description: status code
                   message:
                     type: string
                     example: Email not valid
                     description: status code
                 required:
                   - status
                   - message

        '402':
           description: 'The password provided by the user does not match the one in the database'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 402
                     description: status code
                   message:
                     type: string
                     example: Password does not match
                     description: status code
                 required:
                   - status
                   - message

  /published/{uid}/posts/{id}:
    delete: 
      description: >-
        Deletes one post previoulsy published by the user
      summary: Delete published post
      parameters:
        - in: user id
          name: uid
          required: true
          schema:
            type: string
          description: The mongodb objectId of the user
        - in: post id
          name: id
          required: true
          schema:
            type: string
            description: The mongodb objectId of the post
      responses:
        '200':
          description: 'The post was successfully deleted'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 62866283f3ff1e92d70116ef
                        description: "mongodb id of the deleted post"
                      title:
                        type: string
                        example: Appartamento bellissimo
                        description: "Title of the post"
                      description:
                        type: string
                        example: Vicino a tutto
                        description: "Details of the post"
                      createdBy:
                        type: string
                        example: 628a1d73fc4964ea27473f96
                        description: "id of creator of the post"
                      where:
                        type: string
                        example: "Piazza Marconi"
                        description: "location of the building"
                      contract:
                        type: string
                        example: "monthly"
                        description: "type of contract (montly, annual)"
                      phone: 
                        type: string
                        example: "3210457381"
                        description: "phone number of the owner"
                      showPrice: 
                        type: string
                        example: "300"
                        description: "the price shown (can be different from the rooms)"
                      rooms:
                        type: number
                        example: 3
                        description: "number of rooms"
                      email: 
                        type: string
                        example: "pippo@mail.com"
                        description: "mail of the owner"
                      available: 
                        type: array
                        example: ["room 1", 280, "room number 1"]
                        description: "rooms available for this building"
                items:
                  $ref: '#/components/schemas/Post'
        '404':
          description: "the post to delete was not found"
          content:
            application/json: 
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                    description: status code
                  message:
                    type: string
                    example: Post not found
                    description: status code
                required:
                  - status
                  - message
        '400':
           description: 'Either the user id or the post id is invalid'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 400
                     description: status code
                   message:
                     type: string
                     example: user id not valid
                     description: status code
                 required:
                   - status
                   - message
        '403':
           description: 'Wrong access token'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 400
                     description: status code
                   message:
                     type: string
                     example: Forbidden
                     description: status code
                 required:
                   - status
                   - message
        '401':
           description: 'Attempting to delete a post not published by a certain user'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 401
                     description: status code
                   message:
                     type: string
                     example: You can only delete your own posts
                     description: status code
                 required:
                   - status
                   - message
  
    put:
      description: >-
        Modify one post previously published by the user
      summary: Modify published post
      parameters:
        - in: user id
          name: uid
          required: true
          schema:
            type: string
          description: The mongodb objectId of the user
        - in: post id
          name: id
          required: true
          schema:
            type: string
            description: The mongodb objectId of the post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Modified title
                  description: 'New title'
                description_:
                  type: string
                  example: Modified description
                  description: 'New description'
                contract:
                  type: string
                  example: monthly
                  description: 'New type of contract'
                phone:
                  type: string
                  example: "3421266597"
                  description: "New phone number of owner"
                showPrice:
                  type: string
                  example: 310
                  description: "New show price"
                rooms:
                  type: number
                  example: 4
                  description: "New number of rooms"
                available:
                  type: array
                  example: ["room1", 280, "room number 1", "room2", 270, "room number 2"]
                  description: "New array of rooms"
                where:
                  type: string
                  example: "Piazza Garibaldi"
                  description: "New location of building"
      responses:
        '200':
          description: 'The post was successfully modified'
          content:
            application/json:
              schema: 
                type: object
                properties:
                  acknowledged:
                    type: boolean
                    example: true
                    description: "Result of edit"
                  modifiedCount: 
                    type: number
                    example: 1
                    description: "No. of edits made"
                  upsertedId: 
                    type: objectId
                    example: null
                    description: "Id is still the same"
                  matchedCount: 
                    type: number
                    example: 1
                    description: "No. of posts found with matched attributes"
        '404':
           description: 'Post not found'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 404
                     description: status code
                   message:
                     type: string
                     example: post not found
                     description: status code
                 required:
                   - status
                   - message
        '400':
           description: 'User id or post id not valid'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 400
                     description: status code
                   message:
                     type: string
                     example: uid not valid
                     description: status code
                 required:
                   - status
                   - message
        '401':
           description: 'Attempting to modify a post not published by a certain user'
           content:
             application/json:
               schema:
                 type: object
                 properties:
                   status:
                     type: integer
                     example: 401
                     description: status code
                   message:
                     type: string
                     example: You can only modify your own posts
                     description: status code
                 required:
                   - status
                   - message 
          
components:
  schemas:
    Post:
      type: object
      required:
        - id
        - title
        - description
        - createdBy
      properties:
        id:
          type: string
          example: 628662fbf3ff1e92d70116f2
          description: 'mongodb odjectId of the post'
        title:
          type: string
          example: Appartamento bellissimo
          description: 'title of the post'
        description:
          type: string
          example: Vicino a tutto
        createdBy:
          type: string
          example: 62926a256236cd334360ac49
          description: 'email address of the creator of the post'
        contract:
          type: string
          example: annuale
          description: 'Type of contract'
        phone:
          type: string
          example: 7890 12345
          description: 'phone number of th creator'
        showPrice:
          type: string
          example: 500
          description: 'price of the rent for the whole apartment'
        rooms:
          type: integer
          example: 5
          description: 'number of rooms'
        email:
          type: string
          example: pippo@email.com
          description: 'Email address of the creator'
        available:
          type: array
          items:
            $ref: '#/components/schemas/Room'
          description: 'rooms available for rent'
        where:
          type: string
          example: Via Fiore, 71 (TN)
          description: 'address of the apartment'

    Room:
      type: object
      required:
        - name
        - price
        - description
      properties:
        name:
          type: string
          example: stanza 1
          description: 'name of the room'
        price:
          type: integer
          example: 200
          description: 'price of the room'
        description:
          type: string
          example: stanza bella
          description: 'info about the room'
    Bookmarked:
      type: string
      example: 6298f80d3be4df0eb2790de6